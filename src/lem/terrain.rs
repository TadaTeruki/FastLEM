use crate::core::{
    traits::{Site, TerrainInterpolator},
    units::Altitude,
};

/// Represents a terrain generated by `TerrainGenerator`.
/// ### Properties
/// - `sites` is the set of sites.
/// - `altitudes` is the set of altitudes.
#[derive(Default)]
pub struct Terrain<S: Site, I: TerrainInterpolator<S>> {
    sites: Vec<S>,
    altitudes: Vec<Altitude>,
    interpolator: I,
}

impl<S: Site, I: TerrainInterpolator<S>> Terrain<S, I> {
    pub fn new(sites: Vec<S>, altitudes: Vec<Altitude>, interpolator: I) -> Self {
        Self {
            sites,
            altitudes,
            interpolator,
        }
    }

    pub fn sites(&self) -> &[S] {
        &self.sites
    }

    pub fn altitudes(&self) -> &[Altitude] {
        &self.altitudes
    }

    pub fn get_altitude(&self, site: &S) -> Option<Altitude> {
        self.interpolator.interpolate(&self.altitudes, site)
    }
}
