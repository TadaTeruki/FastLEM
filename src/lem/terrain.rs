use crate::core::{
    traits::{Site, TerrainInterpolator},
    units::Altitude,
};

/// Represents a terrain generated by `TerrainGenerator`.
/// ### Properties
/// - `sites` is the set of sites.
/// - `altitudes` is the set of altitudes.
#[derive(Default)]
pub struct Terrain<S: Site, I: TerrainInterpolator<S>> {
    pub sites: Vec<S>,
    pub altitudes: Vec<Altitude>,
    interpolator: I,
}

impl<S: Site, I: TerrainInterpolator<S>> Terrain<S, I> {
    pub fn new(sites: Vec<S>, altitudes: Vec<Altitude>, interpolator: I) -> Self {
        Self {
            sites,
            altitudes,
            interpolator,
        }
    }

    pub fn get_altitude(&self, site: &S) -> Option<Altitude> {
        let triangle = self.interpolator.search(site);
        if let Some(triangle) = triangle {
            let interpolation = self.interpolator.interpolate(triangle, site);
            let altitude = self.altitudes[triangle[0]] * interpolation[0]
                + self.altitudes[triangle[1]] * interpolation[1]
                + self.altitudes[triangle[2]] * interpolation[2];
            Some(altitude)
        } else {
            None
        }
    }
}
